{"ast":null,"code":"import { ElementRef, Renderer2 } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/note.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/meteo.service\";\nexport let SwipeDirective = /*#__PURE__*/(() => {\n  class SwipeDirective {\n    constructor(noteService, renderer, el, router, meteoService) {\n      this.noteService = noteService;\n      this.renderer = renderer;\n      this.el = el;\n      this.router = router;\n      this.meteoService = meteoService;\n      this.oldScroll = 0;\n    }\n\n    ngOnInit() {\n      this.noteService.actualPrevNext.subscribe(prevNext => {\n        this.prevNext = prevNext;\n      });\n      this.meteoService.drawerstate.subscribe(drawer => this.drawer = drawer);\n    }\n\n    onWindowTouch(e) {\n      this.touchStartX = e.targetTouches[0].screenX;\n      this.touchStartY = e.targetTouches[0].screenY;\n    }\n\n    onTouchMove(e) {\n      this.touchMoveX = e.targetTouches[0].screenX;\n      let touchMoveY = e.targetTouches[0].screenY - this.touchStartY;\n\n      if (touchMoveY < -150 || touchMoveY > 150) {\n        this.el.nativeElement.style.opacity = 1;\n        this.el.nativeElement.style.transform = 'translateX(0)';\n      } else {\n        this.movement = this.touchMoveX - this.touchStartX;\n\n        if (this.movement > 40 || this.movement < -40) {\n          this.el.nativeElement.style.opacity = 1 + -Math.abs(this.movement) / 100;\n          this.el.nativeElement.style.transform = 'translateX(' + this.movement + 'px)';\n        }\n      }\n    }\n\n    onTouchEnd(e) {\n      if (this.movement > 100) {\n        if (this.prevNext.next != \"tomorrow\") {\n          this.router.navigate([this.prevNext.prev]);\n        } else {\n          this.drawer.open();\n          this.el.nativeElement.style.opacity = 1;\n          this.el.nativeElement.style.transform = 'translateX(0)';\n        }\n      }\n\n      if (this.movement < -100) {\n        this.router.navigate([this.prevNext.next]);\n\n        if (this.prevNext.next == 'moredays' && this.prevNext.prev == 'tomorrow') {\n          this.el.nativeElement.style.opacity = 1;\n          this.el.nativeElement.style.transform = 'translateX(0)';\n        }\n      }\n\n      if (Math.abs(this.movement) < 100) {\n        this.el.nativeElement.style.opacity = 1;\n        this.el.nativeElement.style.transform = 'translateX(0)';\n      }\n\n      this.touchStartX = 0;\n    }\n\n  }\n\n  SwipeDirective.ɵfac = function SwipeDirective_Factory(t) {\n    return new (t || SwipeDirective)(i0.ɵɵdirectiveInject(i1.NoteService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.MeteoService));\n  };\n\n  SwipeDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: SwipeDirective,\n    selectors: [[\"\", \"appSwipe\", \"\"]],\n    hostBindings: function SwipeDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"touchstart\", function SwipeDirective_touchstart_HostBindingHandler($event) {\n          return ctx.onWindowTouch($event);\n        })(\"touchmove\", function SwipeDirective_touchmove_HostBindingHandler($event) {\n          return ctx.onTouchMove($event);\n        })(\"touchend\", function SwipeDirective_touchend_HostBindingHandler($event) {\n          return ctx.onTouchEnd($event);\n        });\n      }\n    }\n  });\n  return SwipeDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}