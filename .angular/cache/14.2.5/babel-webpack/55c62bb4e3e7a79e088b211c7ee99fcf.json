{"ast":null,"code":"import { ElementRef, Renderer2 } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/note.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/meteo.service\";\nexport let SwipeDirective = /*#__PURE__*/(() => {\n  class SwipeDirective {\n    constructor(noteService, renderer, el, router, meteoService, route) {\n      this.noteService = noteService;\n      this.renderer = renderer;\n      this.el = el;\n      this.router = router;\n      this.meteoService = meteoService;\n      this.route = route;\n      this.direction = \"none\";\n      this.oldScroll = 0;\n    }\n\n    ngOnInit() {\n      this.noteService.actualPrevNext.subscribe(prevNext => {\n        this.prevNext = prevNext;\n      });\n      this.meteoService.drawerstate.subscribe(drawer => this.drawer = drawer);\n      this.route.data.subscribe(route => {\n        this.activatedRoute = route.tab;\n      });\n    }\n\n    onWindowTouch(e) {\n      this.t1 = new Date().getTime();\n      this.el.nativeElement.style.transition = '';\n      this.touchStartX = e.targetTouches[0].screenX;\n      this.touchStartY = e.targetTouches[0].screenY;\n    }\n\n    onTouchMove(e) {\n      this.touchMoveX = e.targetTouches[0].screenX;\n      this.touchMoveY = e.targetTouches[0].screenY;\n      this.movementX = this.touchMoveX - this.touchStartX;\n      this.movementY = this.touchMoveY - this.touchStartY;\n      let scroll = this.el.nativeElement.scrollTop;\n\n      if (scroll != this.oldScroll) {\n        this.direction = \"ver\";\n        this.oldScroll = scroll;\n      }\n\n      setTimeout(() => {\n        if (this.direction == \"none\") {\n          if (Math.abs(this.movementX) < Math.abs(this.movementY) && (this.activatedRoute == \"1\" || this.activatedRoute == \"3\")) {\n            this.direction = 'ver';\n          } else {\n            this.direction = 'hor';\n          }\n        }\n      }, 50);\n\n      if (this.direction == 'hor' || this.direction == 'ver') {\n        //navigate today\n        if (this.direction == 'hor') {} else {\n          this.movementX = 0;\n\n          if (this.activatedRoute == '1') {\n            this.el.nativeElement.style.transition = 'all 0s';\n            this.el.nativeElement.style.opacity = 1 - Math.abs(this.movementY) / 200;\n            this.el.nativeElement.style.transform = 'translateY(' + this.movementY + 'px)';\n          }\n        } // horizontally navigate\n\n\n        if (this.activatedRoute != '6') {\n          if (this.direction == 'ver') {} else {\n            this.movementY = 0;\n            this.el.nativeElement.style.transition = 'all 0s';\n            this.el.nativeElement.style.opacity = 1 - Math.abs(this.movementX) / 200;\n            this.el.nativeElement.style.transform = 'translateX(' + this.movementX + 'px)';\n          }\n        }\n      }\n    }\n\n    onTouchEnd(e) {\n      this.direction = \"none\";\n      this.el.nativeElement.style.transition = 'all 0.2s';\n      this.t2 = new Date().getTime();\n      let t3 = this.t2 - this.t1; //console.log(t3+\"ms\")\n\n      if (Math.abs(this.movementX) > Math.abs(this.movementY)) {\n        this.movementY = 0;\n        this.movement = Math.abs(this.movementX);\n      } else {\n        this.movementX = 0;\n        this.movement = Math.abs(this.movementY);\n      } //console.log(this.movement+\"px\")\n\n\n      if (this.movement <= 70 && t3 > 200) {\n        this.el.nativeElement.style.opacity = 1;\n        this.el.nativeElement.style.transform = 'translate(0)';\n      }\n\n      if (this.movement <= 20 && t3 < 200) {\n        this.el.nativeElement.style.opacity = 1;\n        this.el.nativeElement.style.transform = 'translate(0)';\n      }\n\n      if (this.activatedRoute != '6' && (t3 < 200 || t3 > 200 && this.movement > 70)) {\n        if (this.movementX > 20) {\n          if (this.prevNext.next != 'tomorrow') {\n            this.router.navigate([this.prevNext.prev]);\n          } else {\n            this.drawer.open();\n            this.el.nativeElement.style.opacity = 1;\n            this.el.nativeElement.style.transform = 'translate(0)';\n          }\n        }\n\n        if (this.movementX < -20) {\n          this.router.navigate([this.prevNext.next]);\n\n          if (this.prevNext.next == 'moredays' && this.prevNext.prev == 'tomorrow') {\n            this.el.nativeElement.style.opacity = 1;\n            this.el.nativeElement.style.transform = 'translate(0)';\n          }\n        }\n      }\n\n      if (this.activatedRoute == '1' || this.activatedRoute == '6') {\n        if (this.movementY < -20) {\n          this.router.navigate(['home', 'daydetails']);\n        }\n\n        if (this.activatedRoute == '6' && this.movementY > 20) {\n          this.router.navigate(['home']);\n        }\n\n        if (this.activatedRoute == '1' && this.movementY > 20) {\n          this.el.nativeElement.style.opacity = 1;\n          this.el.nativeElement.style.transform = 'translate(0)';\n        }\n\n        if (this.activatedRoute == '6' && this.movementY < -20) {\n          this.el.nativeElement.style.opacity = 1;\n          this.el.nativeElement.style.transform = 'translate(0)';\n        }\n      }\n\n      this.touchStartX = 0;\n      this.movementX = 0;\n      this.movementY = 0;\n    }\n\n  }\n\n  SwipeDirective.ɵfac = function SwipeDirective_Factory(t) {\n    return new (t || SwipeDirective)(i0.ɵɵdirectiveInject(i1.NoteService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.MeteoService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n\n  SwipeDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: SwipeDirective,\n    selectors: [[\"\", \"appSwipe\", \"\"]],\n    hostBindings: function SwipeDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"touchstart\", function SwipeDirective_touchstart_HostBindingHandler($event) {\n          return ctx.onWindowTouch($event);\n        })(\"touchmove\", function SwipeDirective_touchmove_HostBindingHandler($event) {\n          return ctx.onTouchMove($event);\n        })(\"touchend\", function SwipeDirective_touchend_HostBindingHandler($event) {\n          return ctx.onTouchEnd($event);\n        });\n      }\n    }\n  });\n  return SwipeDirective;\n})();","map":null,"metadata":{},"sourceType":"module"}