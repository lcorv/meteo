{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/meteo.service\";\nimport * as i2 from \"../services/note.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/icon\";\nimport * as i8 from \"@angular/material/button\";\nimport * as i9 from \"@angular/material/button-toggle\";\nimport * as i10 from \"@angular/flex-layout/flex\";\nimport * as i11 from \"@angular/flex-layout/extended\";\nimport * as i12 from \"../directives/navbar-hiding.directive\";\n\nfunction NavbarComponent_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function NavbarComponent_button_10_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.city = \"\");\n    });\n    i0.ɵɵelementStart(1, \"mat-icon\");\n    i0.ɵɵtext(2, \"close\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction NavbarComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18)(1, \"div\", 19);\n    i0.ɵɵtext(2, \"sorry! \\uD83E\\uDD37\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 11);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 11);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate2(\"\", ctx_r1.errMess.status, \" - \", ctx_r1.errMess.text, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.errMess.message);\n  }\n}\n\nconst _c0 = function () {\n  return {\n    \"padding-top.px\": 30\n  };\n};\n\nexport let NavbarComponent = /*#__PURE__*/(() => {\n  class NavbarComponent {\n    constructor(meteoService, noteService) {\n      this.meteoService = meteoService;\n      this.noteService = noteService;\n      this.city = '';\n      this.offset = new Date().getTimezoneOffset() * 60;\n      this.date = new Date();\n    }\n\n    ngOnInit() {\n      this.getInitialCity();\n      this.noteService.data.subscribe(dark => this.dark = dark);\n    }\n\n    ngAfterViewInit() {}\n\n    onSearch() {\n      this.meteoService.putCity(this.city);\n      this.meteoService.getMeteo(this.city).subscribe({\n        next: forecast => {\n          this.meteo = forecast;\n          this.errMess = null;\n\n          if (this.drawer) {\n            this.drawer.toggle();\n          }\n\n          this.meteoService.putMeteo(this.meteo, this.errMess);\n          this.date = new Date();\n          this.meteoService.putDate(this.date);\n          this.getToday();\n          this.generateChart();\n        },\n        error: errmess => {\n          this.errMess = errmess;\n          this.meteoService.putMeteo(this.meteo, this.errMess);\n        }\n      });\n    }\n\n    onSelect() {\n      this.unit = this.farenheit === 'true';\n      this.meteoService.putUnit(this.unit);\n    }\n\n    getToday() {\n      if (this.meteo.list) {\n        this.today = this.meteo.list.filter(date => new Date((date.dt + this.offset + this.meteo.city.timezone) * 1000).getDay() === new Date(this.date.getTime() + (this.offset + this.meteo.city.timezone) * 1000).getDay() || new Date((date.dt + this.offset + this.meteo.city.timezone) * 1000).getDay() === (1 + new Date(this.date.getTime() + (this.offset + this.meteo.city.timezone) * 1000).getDay() + 7) % 7 && new Date((date.dt + this.offset + this.meteo.city.timezone) * 1000).getHours() < 9);\n      }\n    }\n\n    getInitialCity() {\n      navigator.geolocation.getCurrentPosition(resp => {\n        let lon = Math.round(resp.coords.longitude * 100) / 100;\n        let lat = Math.round(resp.coords.latitude * 100) / 100;\n        this.meteoService.getInitialCity(lat, lon).subscribe(meteo => {\n          this.city = meteo['city'].name;\n          this.meteoService.putCity(this.city);\n          this.meteoService.putDate(this.date);\n          this.meteoService.getMeteo(this.city).subscribe(forecast => {\n            this.meteo = forecast;\n            this.meteoService.putMeteo(this.meteo, this.errMess);\n            this.meteoService.selectedMeteo.subscribe(meteo => {\n              this.meteo = meteo;\n              this.getToday();\n              this.generateChart();\n              this.meteoService.putChart(this.chart);\n            });\n          }), errmess => {\n            this.errMess = errmess;\n          };\n        });\n      }, err => {\n        err;\n      });\n    }\n\n    generateChart() {\n      this.chart = [{\n        name: \"Degrees\",\n        series: []\n      }];\n      let hour;\n\n      for (let i = 0; i < this.today.length; i++) {\n        hour = {\n          name: new Date((this.today[i].dt + this.offset + this.meteo.city.timezone) * 1000),\n          value: Math.round(this.today[i].main.temp)\n        };\n        this.chart[0].series.push(hour);\n      }\n    }\n\n  }\n\n  NavbarComponent.ɵfac = function NavbarComponent_Factory(t) {\n    return new (t || NavbarComponent)(i0.ɵɵdirectiveInject(i1.MeteoService), i0.ɵɵdirectiveInject(i2.NoteService));\n  };\n\n  NavbarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NavbarComponent,\n    selectors: [[\"app-navbar\"]],\n    inputs: {\n      drawer: \"drawer\"\n    },\n    decls: 27,\n    vars: 10,\n    consts: [[\"appNavbarHiding\", \"\", 1, \"nav-container\", 3, \"ngStyle.gt-sm\"], [\"fxHide.gt-sm\", \"\"], [\"fxLayout\", \"row wrap\", \"fxLayoutAlign\", \"start\", 1, \"section\"], [\"fxFlex\", \"100\", \"fxFlex.lt-sm\", \"100\"], [\"appearance\", \"fill\", \"color\", \"primary\"], [\"matInput\", \"\", \"type\", \"text\", 3, \"ngModel\", \"ngModelChange\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\", 4, \"ngIf\"], [\"fxFlex\", \"100\", \"fxFlexOffset\", \"0\"], [\"mat-flat-button\", \"\", \"color\", \"primary\", 1, \"active\", 3, \"disabled\", \"click\"], [\"class\", \"section err\", \"fxLayoutAlign\", \"center center\", \"fxLayout\", \"row wrap\", 4, \"ngIf\"], [\"fxLayoutAlign\", \"space-between\", \"fxLayout\", \"row wrap\", 1, \"section\"], [\"fxFlex\", \"100\"], [\"fxFlex\", \"20\"], [1, \"symbol\", \"material-symbols-outlined\"], [\"fxFlex\", \"\", \"aria-label\", \"Units\", 3, \"value\", \"valueChange\", \"click\"], [\"checked\", \"\", \"value\", \"false\"], [\"value\", \"true\"], [\"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\"], [\"fxLayoutAlign\", \"center center\", \"fxLayout\", \"row wrap\", 1, \"section\", \"err\"], [\"fxFlex\", \"100\", 1, \"err-sorry\"]],\n    template: function NavbarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\");\n        i0.ɵɵtext(3, \"Search\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 3)(6, \"mat-form-field\", 4)(7, \"mat-label\");\n        i0.ɵɵtext(8, \"Type the city\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"input\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function NavbarComponent_Template_input_ngModelChange_9_listener($event) {\n          return ctx.city = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(10, NavbarComponent_button_10_Template, 3, 0, \"button\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"div\", 7)(12, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function NavbarComponent_Template_button_click_12_listener() {\n          return ctx.onSearch();\n        });\n        i0.ɵɵtext(13);\n        i0.ɵɵpipe(14, \"titlecase\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(15, NavbarComponent_div_15_Template, 7, 3, \"div\", 9);\n        i0.ɵɵelementStart(16, \"div\", 10)(17, \"h3\", 11);\n        i0.ɵɵtext(18, \"Units:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"mat-label\", 12)(20, \"span\", 13);\n        i0.ɵɵtext(21, \" thermostat \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(22, \"mat-button-toggle-group\", 14);\n        i0.ɵɵlistener(\"valueChange\", function NavbarComponent_Template_mat_button_toggle_group_valueChange_22_listener($event) {\n          return ctx.farenheit = $event;\n        })(\"click\", function NavbarComponent_Template_mat_button_toggle_group_click_22_listener() {\n          return ctx.onSelect();\n        });\n        i0.ɵɵelementStart(23, \"mat-button-toggle\", 15);\n        i0.ɵɵtext(24, \"Celsius\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"mat-button-toggle\", 16);\n        i0.ɵɵtext(26, \"Farenheit\");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngStyle.gt-sm\", i0.ɵɵpureFunction0(9, _c0));\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngModel\", ctx.city);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.city);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !ctx.city);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" Weather in \", i0.ɵɵpipeBind1(14, 7, ctx.city), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.errMess);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"value\", ctx.farenheit);\n      }\n    },\n    dependencies: [i3.NgIf, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i5.MatFormField, i5.MatLabel, i5.MatSuffix, i6.MatInput, i7.MatIcon, i8.MatButton, i9.MatButtonToggleGroup, i9.MatButtonToggle, i10.DefaultLayoutDirective, i10.DefaultLayoutAlignDirective, i10.DefaultFlexOffsetDirective, i10.DefaultFlexDirective, i11.DefaultShowHideDirective, i11.DefaultStyleDirective, i12.NavbarHidingDirective, i3.TitleCasePipe],\n    styles: [\".nav-container[_ngcontent-%COMP%]{padding:20px}.nav-container[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%]{color:#fff;text-align:center}.nav-container[_ngcontent-%COMP%]   mat-form-field[_ngcontent-%COMP%]{font-size:20px;width:100%}.nav-container[_ngcontent-%COMP%]   .mat-button-toggle[_ngcontent-%COMP%]{width:50%;background-color:#0007;color:#aaa5;line-height:60px}.nav-container[_ngcontent-%COMP%]   .mat-button-toggle-checked[_ngcontent-%COMP%]{background-color:#4e8dda!important;color:#fff!important;border:none}.nav-container[_ngcontent-%COMP%]   .section[_ngcontent-%COMP%]{padding:10px 20px;border-bottom:0px solid rgba(119,119,119,.3333333333)}.nav-container[_ngcontent-%COMP%]   .section[_ngcontent-%COMP%]   .search-button[_ngcontent-%COMP%]{font-size:auto!important}.nav-container[_ngcontent-%COMP%]   .section[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{margin:10px}.nav-container[_ngcontent-%COMP%]   .section[_ngcontent-%COMP%]   .symbol[_ngcontent-%COMP%]{font-size:40px;line-height:60px}.nav-container[_ngcontent-%COMP%]   .err[_ngcontent-%COMP%]{text-align:center}.nav-container[_ngcontent-%COMP%]   .err[_ngcontent-%COMP%]   .err-sorry[_ngcontent-%COMP%]{font-size:40px}.nav-container[_ngcontent-%COMP%]   .propic[_ngcontent-%COMP%]{border-radius:50%;width:100%}.nav-container[_ngcontent-%COMP%]   h3[_ngcontent-%COMP%]{margin:2px}.nav-container[_ngcontent-%COMP%]   small[_ngcontent-%COMP%]{color:#777;margin:2px}.nav-container[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{width:100%;margin-bottom:10px}\"]\n  });\n  return NavbarComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}