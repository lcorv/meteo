{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DisplayNames = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\n\nvar CanonicalCodeForDisplayNames_1 = require(\"./abstract/CanonicalCodeForDisplayNames\");\n\nvar intl_localematcher_1 = require(\"@formatjs/intl-localematcher\");\n\nvar DisplayNames =\n/** @class */\nfunction () {\n  function DisplayNames(locales, options) {\n    var _newTarget = this.constructor;\n\n    if (_newTarget === undefined) {\n      throw TypeError(\"Constructor Intl.DisplayNames requires 'new'\");\n    }\n\n    var requestedLocales = (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales);\n    options = (0, ecma402_abstract_1.GetOptionsObject)(options);\n    var opt = Object.create(null);\n    var localeData = DisplayNames.localeData;\n    var matcher = (0, ecma402_abstract_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');\n    opt.localeMatcher = matcher;\n    var r = (0, intl_localematcher_1.ResolveLocale)(DisplayNames.availableLocales, requestedLocales, opt, [], // there is no relevantExtensionKeys\n    DisplayNames.localeData, DisplayNames.getDefaultLocale);\n    var style = (0, ecma402_abstract_1.GetOption)(options, 'style', 'string', ['narrow', 'short', 'long'], 'long');\n    setSlot(this, 'style', style);\n    var type = (0, ecma402_abstract_1.GetOption)(options, 'type', 'string', ['language', 'currency', 'region', 'script'], undefined);\n\n    if (type === undefined) {\n      throw TypeError(\"Intl.DisplayNames constructor requires \\\"type\\\" option\");\n    }\n\n    setSlot(this, 'type', type);\n    var fallback = (0, ecma402_abstract_1.GetOption)(options, 'fallback', 'string', ['code', 'none'], 'code');\n    setSlot(this, 'fallback', fallback);\n    setSlot(this, 'locale', r.locale);\n    var dataLocale = r.dataLocale;\n    var dataLocaleData = localeData[dataLocale];\n    (0, ecma402_abstract_1.invariant)(!!dataLocaleData, \"Missing locale data for \".concat(dataLocale));\n    setSlot(this, 'localeData', dataLocaleData);\n    (0, ecma402_abstract_1.invariant)(dataLocaleData !== undefined, \"locale data for \".concat(r.locale, \" does not exist.\"));\n    var types = dataLocaleData.types;\n    (0, ecma402_abstract_1.invariant)(typeof types === 'object' && types != null, 'invalid types data');\n    var typeFields = types[type];\n    (0, ecma402_abstract_1.invariant)(typeof typeFields === 'object' && typeFields != null, 'invalid typeFields data');\n    var styleFields = typeFields[style];\n    (0, ecma402_abstract_1.invariant)(typeof styleFields === 'object' && styleFields != null, 'invalid styleFields data');\n    setSlot(this, 'fields', styleFields);\n  }\n\n  DisplayNames.supportedLocalesOf = function (locales, options) {\n    return (0, ecma402_abstract_1.SupportedLocales)(DisplayNames.availableLocales, (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales), options);\n  };\n\n  DisplayNames.__addLocaleData = function () {\n    var data = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      data[_i] = arguments[_i];\n    }\n\n    for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {\n      var _b = data_1[_a],\n          d = _b.data,\n          locale = _b.locale;\n      var minimizedLocale = new Intl.Locale(locale).minimize().toString();\n      DisplayNames.localeData[locale] = DisplayNames.localeData[minimizedLocale] = d;\n      DisplayNames.availableLocales.add(minimizedLocale);\n      DisplayNames.availableLocales.add(locale);\n\n      if (!DisplayNames.__defaultLocale) {\n        DisplayNames.__defaultLocale = minimizedLocale;\n      }\n    }\n  };\n\n  DisplayNames.prototype.of = function (code) {\n    checkReceiver(this, 'of');\n    var type = getSlot(this, 'type');\n    var codeAsString = (0, ecma402_abstract_1.ToString)(code);\n\n    if (!isValidCodeForDisplayNames(type, codeAsString)) {\n      throw RangeError('invalid code for Intl.DisplayNames.prototype.of');\n    }\n\n    var _a = (0, ecma402_abstract_1.getMultiInternalSlots)(__INTERNAL_SLOT_MAP__, this, 'localeData', 'style', 'fallback'),\n        localeData = _a.localeData,\n        style = _a.style,\n        fallback = _a.fallback; // Canonicalize the case.\n\n\n    var canonicalCode = (0, CanonicalCodeForDisplayNames_1.CanonicalCodeForDisplayNames)(type, codeAsString); // This is only used to store extracted language region.\n\n    var regionSubTag;\n\n    if (type === 'language') {\n      var regionMatch = /-([a-z]{2}|\\d{3})\\b/i.exec(canonicalCode);\n\n      if (regionMatch) {\n        // Remove region subtag\n        canonicalCode = canonicalCode.substring(0, regionMatch.index) + canonicalCode.substring(regionMatch.index + regionMatch[0].length);\n        regionSubTag = regionMatch[1];\n      }\n    }\n\n    var typesData = localeData.types[type]; // If the style of choice does not exist, fallback to \"long\".\n\n    var name = typesData[style][canonicalCode] || typesData.long[canonicalCode];\n\n    if (name !== undefined) {\n      // If there is a region subtag in the language id, use locale pattern to interpolate the region\n      if (regionSubTag) {\n        // Retrieve region display names\n        var regionsData = localeData.types.region;\n        var regionDisplayName = regionsData[style][regionSubTag] || regionsData.long[regionSubTag];\n\n        if (regionDisplayName || fallback === 'code') {\n          // Interpolate into locale-specific pattern.\n          var pattern = localeData.patterns.locale;\n          return pattern.replace('{0}', name).replace('{1}', regionDisplayName || regionSubTag);\n        }\n      } else {\n        return name;\n      }\n    }\n\n    if (fallback === 'code') {\n      return codeAsString;\n    }\n  };\n\n  DisplayNames.prototype.resolvedOptions = function () {\n    checkReceiver(this, 'resolvedOptions');\n    return tslib_1.__assign({}, (0, ecma402_abstract_1.getMultiInternalSlots)(__INTERNAL_SLOT_MAP__, this, 'locale', 'style', 'type', 'fallback'));\n  };\n\n  DisplayNames.getDefaultLocale = function () {\n    return DisplayNames.__defaultLocale;\n  };\n\n  DisplayNames.localeData = {};\n  DisplayNames.availableLocales = new Set();\n  DisplayNames.__defaultLocale = '';\n  DisplayNames.polyfilled = true;\n  return DisplayNames;\n}();\n\nexports.DisplayNames = DisplayNames; // https://tc39.es/proposal-intl-displaynames/#sec-isvalidcodefordisplaynames\n\nfunction isValidCodeForDisplayNames(type, code) {\n  switch (type) {\n    case 'language':\n      // subset of unicode_language_id\n      // languageCode [\"-\" scriptCode] [\"-\" regionCode] *(\"-\" variant)\n      // where:\n      // - languageCode is either a two letters ISO 639-1 language code or a three letters ISO 639-2 language code.\n      // - scriptCode is should be an ISO-15924 four letters script code\n      // - regionCode is either an ISO-3166 two letters region code, or a three digits UN M49 Geographic Regions.\n      return /^[a-z]{2,3}(-[a-z]{4})?(-([a-z]{2}|\\d{3}))?(-([a-z\\d]{5,8}|\\d[a-z\\d]{3}))*$/i.test(code);\n\n    case 'region':\n      // unicode_region_subtag\n      return /^([a-z]{2}|\\d{3})$/i.test(code);\n\n    case 'script':\n      // unicode_script_subtag\n      return /^[a-z]{4}$/i.test(code);\n\n    case 'currency':\n      return (0, ecma402_abstract_1.IsWellFormedCurrencyCode)(code);\n  }\n}\n\ntry {\n  // IE11 does not have Symbol\n  if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n    Object.defineProperty(DisplayNames.prototype, Symbol.toStringTag, {\n      value: 'Intl.DisplayNames',\n      configurable: true,\n      enumerable: false,\n      writable: false\n    });\n  }\n\n  Object.defineProperty(DisplayNames, 'length', {\n    value: 2,\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n} catch (e) {// Make test 262 compliant\n}\n\nvar __INTERNAL_SLOT_MAP__ = new WeakMap();\n\nfunction getSlot(instance, key) {\n  return (0, ecma402_abstract_1.getInternalSlot)(__INTERNAL_SLOT_MAP__, instance, key);\n}\n\nfunction setSlot(instance, key, value) {\n  (0, ecma402_abstract_1.setInternalSlot)(__INTERNAL_SLOT_MAP__, instance, key, value);\n}\n\nfunction checkReceiver(receiver, methodName) {\n  if (!(receiver instanceof DisplayNames)) {\n    throw TypeError(\"Method Intl.DisplayNames.prototype.\".concat(methodName, \" called on incompatible receiver\"));\n  }\n}","map":null,"metadata":{},"sourceType":"script"}